Thread A
on update():
  for person in people:
    if not person.openFaceModel:
      model = getRecycledOpenFaceModel() // from pool of unused models
      success = model.initializeTracking(bbox)
      if success:
        person.openFaceModel = model
      else:
        recycleModel(model)
    else:
      success = person.openFaceModel.updateTracking()
      if success: // tracking updated successfully
        person.currentBBox = person.openFaceModel.bbox
        person.landmarks = person.openFaceModel.landmarks
        person.actionUnits = person.openFaceModel.actionUnits
      else: // update tracking failed
        if person.model.failures_in_a_row > MAX_MODEL_FAILURES_IN_A_ROW:
          person.model = none


Thread A
on draw():
  for person in people:
    if BIRDSEYE:
      person.drawBirdseyeView()
    else:
      person.drawFrontalView()

Thread B
on new mtcnn bounding boxes:
  peopleThatAreStillAround = []
  for newBox in newBoundingBoxes:
    existingPerson = getPersonAt(newBox)
    if existingPerson:
      peopleThatAreStillAround.add(existingPerson)
    else:
      people.add(Person(newBbox))
  // clean up people that mtcnn can't find anymore
  for person in people:
    if person not in peopleThatAreStillAround:
      people.remove(person)

Thread B
def getPersonAt(bbox):
  for person in people:
    if significant_overlap(person.currentBBox, newBox):
      return person
  return none
